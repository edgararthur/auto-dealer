import React, { createContext, useContext, useState, useEffect } from 'react';
import supabase from '../../shared/supabase/supabaseClient.js';
import { logError } from '../../shared/utils/errorLogger';

// Supabase configuration for connectivity testing
const supabaseUrl = 'https://zlzzdycsizfwjkbulwgt.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpsenpkeWNzaXpmd2prYnVsd2d0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ4NzI4OTQsImV4cCI6MjA2MDQ0ODg5NH0.vW5Nmy2Kh7yeI-Td41XKCdJo-n0BQxqQfGNEOcTyJRM';

// Add console logging to check if imports are working (development only)
if (process.env.NODE_ENV === 'development') {
    console.log('Buyer AuthContext: Imports loaded', { 
    hasSupabase: !!supabase, 
    hasSupabaseAuth: !!(supabase && supabase.auth),
    logError: !!logError
  });
}

// Create context
const AuthContext = createContext(null);

// Auth provider component
export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [session, setSession] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Initialize auth on component mount
  useEffect(() => {
    let timeoutId;
    let mounted = true;
    let sessionTimeoutId;

    // Set a timeout to prevent infinite loading
    timeoutId = setTimeout(() => {
      if (mounted && loading) {
        console.warn('AuthContext: Initialization timeout, setting loading to false');
        setLoading(false);
        setError('Authentication initialization timed out. Please refresh the page.');
      }
    }, 10000); // 10 second timeout

    // Create a timeout wrapper for Supabase calls
    const withTimeout = (promise, timeoutMs = 5000) => {
      return Promise.race([
        promise,
        new Promise((_, reject) => {
          setTimeout(() => reject(new Error('Operation timed out')), timeoutMs);
        })
      ]);
    };

    // Get current session and set up auth state
    const initializeAuth = async () => {
      try {
        if (!mounted) return;
        
        console.log('AuthContext: Starting initialization');
        
        // Check if Supabase is available
        if (!supabase || !supabase.auth) {
          throw new Error('Authentication service unavailable');
        }
        
        // Test basic connectivity first - but don't fail completely if it times out
        let connectivityOk = false;
        try {
          console.log('AuthContext: Testing Supabase connectivity...');
          await withTimeout(
            fetch(supabaseUrl + '/rest/v1/', {
              method: 'HEAD',
              headers: {
                'apikey': supabaseAnonKey
              }
            }),
            3000
          );
          console.log('AuthContext: Supabase connectivity test passed');
          connectivityOk = true;
        } catch (connectError) {
          console.warn('AuthContext: Supabase connectivity test failed:', connectError.message);
          console.log('AuthContext: Proceeding with offline mode - will redirect to login');
          // Don't throw here, just proceed with no session
        }
        
        // Only try to get session if connectivity test passed
        let currentSession = null;
        if (connectivityOk) {
          try {
            console.log('AuthContext: Getting session...');
            const sessionResult = await withTimeout(
              supabase.auth.getSession(),
              5000
            );
            
            if (!mounted) return;
            
            if (sessionResult.error) {
              console.warn('AuthContext: Session error:', sessionResult.error.message);
            } else {
              currentSession = sessionResult.data?.session;
            }
          } catch (sessionError) {
            console.warn('AuthContext: Session fetch timed out:', sessionError.message);
            // Continue without session
          }
        }

        setSession(currentSession);
        
        // If we have a session, get user profile
        if (currentSession && connectivityOk) {
          console.log('AuthContext: Session found, getting user profile');
          
          try {
            // Try to get profile by user ID with timeout
            let profileResult = await withTimeout(
              supabase
                .from('profiles')
                .select('*')
                .eq('id', currentSession.user.id)
                .maybeSingle(),
              5000
            );
              
            if (!mounted) return;
            
            let profile = profileResult.data;
            
            // If no profile found by ID, try to find by email
            if (!profile && !profileResult.error && currentSession.user.email) {
              const emailResult = await withTimeout(
                supabase
                  .from('profiles')
                  .select('*')
                  .eq('email', currentSession.user.email)
                  .maybeSingle(),
                5000
              );
              
              if (!mounted) return;
              
              if (emailResult.data && !emailResult.error) {
                profile = emailResult.data;
              }
            }
            
            // If still no profile found, create a basic one for buyer
            if (!profile && !profileResult.error) {
              console.log('AuthContext: Creating basic buyer profile');
              try {
                const createResult = await withTimeout(
                  supabase
                    .from('profiles')
                    .insert({
                      id: currentSession.user.id,
                      full_name: currentSession.user.user_metadata?.full_name || 
                                 currentSession.user.user_metadata?.name || 
                                 currentSession.user.email?.split('@')[0] || 'User',
                      email: currentSession.user.email,
                      role: 'customer',
                      created_at: new Date(),
                      is_active: true
                    })
                    .select()
                    .single(),
                  5000
                );
                  
                if (!mounted) return;
                  
                if (!createResult.error) {
                  profile = createResult.data;
                }
              } catch (createErr) {
                console.error('AuthContext: Error creating profile:', createErr);
              }
            }
            
            if (profileResult.error && profileResult.error.code !== 'PGRST116') {
              console.error('AuthContext: Profile error:', profileResult.error);
            }
            
            if (mounted) {
              setUser({
                ...currentSession.user,
                profile
              });
            }
          } catch (profileError) {
            console.warn('AuthContext: Profile fetch failed:', profileError.message);
            // Set user without profile
            if (mounted) {
              setUser({
                ...currentSession.user,
                profile: null
              });
            }
          }
        } else if (!connectivityOk) {
          console.log('AuthContext: No connectivity - will show login page');
          // Set a helpful error message for network issues
          if (mounted) {
            setError('Network connection issue. Please check your internet connection and try again.');
          }
        } else {
          console.log('AuthContext: No session found');
        }
      } catch (err) {
        console.error('AuthContext: Initialization error', err);
        if (mounted) {
          logError('AuthContext.initializeAuth', err);
          if (err.message.includes('timed out') || err.message.includes('fetch')) {
            setError('Cannot connect to authentication service. Please check your internet connection and try again.');
          } else {
            setError(err.message || 'Failed to initialize authentication');
          }
        }
      } finally {
        if (mounted) {
          console.log('AuthContext: Initialization complete');
          setLoading(false);
          clearTimeout(timeoutId);
        }
      }
    };

    initializeAuth();

    // Set up auth state change subscription with timeout protection
    let subscription = null;
    
    if (supabase && supabase.auth) {
      try {
        const { data: { subscription: authSubscription } } = supabase.auth.onAuthStateChange(async (event, newSession) => {
          if (!mounted) return;
          
          console.log('AuthContext: Auth state change', { event, hasSession: !!newSession });
          setSession(newSession);
          
          if (event === 'SIGNED_IN' && newSession) {
            // Get user profile on sign in with timeout - but don't block login if it fails
            try {
              let profileResult = await withTimeout(
                supabase
                  .from('profiles')
                  .select('*')
                  .eq('id', newSession.user.id)
                  .maybeSingle(),
                5000
              );
              
              if (!mounted) return;
              
              let profile = profileResult.data;
              
              // If no profile found by ID, try by email
              if (!profile && !profileResult.error && newSession.user.email) {
                const emailResult = await withTimeout(
                  supabase
                    .from('profiles')
                    .select('*')
                    .eq('email', newSession.user.email)
                    .maybeSingle(),
                  5000
                );
                
                if (!mounted) return;
                  
                if (emailResult.data && !emailResult.error) {
                  profile = emailResult.data;
                }
              }
              
              if (profileResult.error && profileResult.error.code !== 'PGRST116') {
                console.error('AuthContext: Error getting profile after sign in', profileResult.error);
              }
              
              // Set user with profile (or without if profile fetch failed)
              if (mounted) {
                setUser({
                  ...newSession.user,
                  profile: profile || {
                    id: newSession.user.id,
                    full_name: newSession.user.user_metadata?.full_name || 
                               newSession.user.user_metadata?.name || 
                               newSession.user.email?.split('@')[0] || 'User',
                    email: newSession.user.email,
                    role: 'customer',
                    created_at: new Date(),
                    is_active: true
                  }
                });
                console.log('AuthContext: User set after sign in with profile:', !!profile);
              }
            } catch (profileErr) {
              console.warn('AuthContext: Profile fetch timeout after sign in, proceeding with basic user data');
              // Don't block login - create a basic profile from user metadata
              if (mounted) {
                setUser({
                  ...newSession.user,
                  profile: {
                    id: newSession.user.id,
                    full_name: newSession.user.user_metadata?.full_name || 
                               newSession.user.user_metadata?.name || 
                               newSession.user.email?.split('@')[0] || 'User',
                    email: newSession.user.email,
                    role: 'customer',
                    created_at: new Date(),
                    is_active: true
                  }
                });
                console.log('AuthContext: User set with fallback profile after timeout');
              }
            }
          } else if (event === 'SIGNED_OUT') {
            console.log('AuthContext: User signed out');
            if (mounted) {
              setUser(null);
            }
          }
        });
        
        subscription = authSubscription;
      } catch (subscriptionErr) {
        console.error('AuthContext: Error setting up auth subscription', subscriptionErr);
      }
    }

    // Clean up subscription and timeout
    return () => {
      mounted = false;
      clearTimeout(timeoutId);
      clearTimeout(sessionTimeoutId);
      subscription?.unsubscribe();
    };
  }, []);

  // Register a new user (buyer)
  const register = async (userData) => {
    try {
      setError(null);
      
      // Handle both 'name' and 'full_name' for backward compatibility
      const fullName = userData.full_name || userData.name;
      
      // Validate required fields
      if (!userData.email || !userData.password || !fullName) {
        return { success: false, error: 'Email, password and name are required' };
      }
      
      // Register user with Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: userData.email,
        password: userData.password,
        options: {
          data: {
            full_name: fullName,
            role: 'customer'
          }
        }
      });

      if (authError) {
        throw authError;
      }

      if (!authData.user) {
        return { 
          success: false, 
          error: 'Registration failed. Please try again.' 
        };
      }
      
      // Create profile record in the profiles table
      const { error: profileError } = await supabase
        .from('profiles')
        .insert({
          id: authData.user.id,
          full_name: fullName,
          email: userData.email,
          role: 'customer',
          created_at: new Date(),
          is_active: true
        });

      if (profileError) {
        console.error('Register: Profile creation error:', profileError);
        // Continue even if profile creation fails
      }
      
      return {
        success: true,
        user: authData.user,
        message: 'Registration successful! Please check your email for verification.'
      };
    } catch (err) {
      logError('AuthContext.register', err);
      return {
        success: false,
        error: err.message
      };
    }
  };

  // Sign in user
  const login = async (email, password) => {
    try {
      setError(null);
      
      if (!email || !password) {
        return { success: false, error: 'Email and password are required' };
      }

      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password
      });

      if (error) {
        throw error;
      }
      
      // Try to get user profile but don't block login if it fails
      let profile = null;
      try {
        // Get user profile - try by ID first with timeout
        const profileResult = await withTimeout(
          supabase
            .from('profiles')
            .select('*')
            .eq('id', data.user.id)
            .maybeSingle(),
          5000
        );
        
        profile = profileResult.data;
        
        // If no profile found by ID, try by email
        if (!profile && !profileResult.error && data.user.email) {
          const emailResult = await withTimeout(
            supabase
              .from('profiles')
              .select('*')
              .eq('email', data.user.email)
              .maybeSingle(),
            5000
          );
            
          if (emailResult.data && !emailResult.error) {
            profile = emailResult.data;
          }
        }
        
        // If still no profile, try to create one (but don't block login if it fails)
        if (!profile && !profileResult.error) {
          try {
            const createResult = await withTimeout(
              supabase
                .from('profiles')
                .insert({
                  id: data.user.id,
                  full_name: data.user.user_metadata?.full_name || 
                             data.user.user_metadata?.name || 
                             data.user.email?.split('@')[0] || 'User',
                  email: data.user.email,
                  role: 'customer',
                  created_at: new Date(),
                  is_active: true
                })
                .select()
                .single(),
              5000
            );
             
            if (!createResult.error) {
              profile = createResult.data;
            }
          } catch (createErr) {
            console.warn('Login: Profile creation timed out, proceeding without database profile');
          }
        }
        
        if (profileResult.error && profileResult.error.code !== 'PGRST116') {
          console.warn('Login: Profile fetch error (non-blocking):', profileResult.error.message);
        }
      } catch (profileErr) {
        console.warn('Login: Profile operations timed out, proceeding with fallback profile');
      }
      
      // Create fallback profile if database profile is not available
      const finalProfile = profile || {
        id: data.user.id,
        full_name: data.user.user_metadata?.full_name || 
                   data.user.user_metadata?.name || 
                   data.user.email?.split('@')[0] || 'User',
        email: data.user.email,
        role: 'customer',
        created_at: new Date(),
        is_active: true
      };
      
      // Check if this is a buyer account (only if we have a database profile)
      if (profile && profile.role !== 'customer') {
        // Sign out if not a customer/buyer
        await supabase.auth.signOut();
        return { 
          success: false, 
          error: 'This is not a buyer account. Please use the appropriate login page.' 
        };
      }
      
      // Set user state with profile data (database or fallback)
      setUser({
        ...data.user,
        profile: finalProfile
      });
      
      setSession(data.session);
      
      console.log('Login successful with profile:', profile ? 'database' : 'fallback');
      
      return {
        success: true,
        user: {
          ...data.user,
          profile: finalProfile
        },
        session: data.session
      };
    } catch (err) {
      logError('AuthContext.login', err);
      return {
        success: false,
        error: err.message
      };
    }
  };

  // Sign out user
  const logout = async () => {
    try {
      setError(null);
      const { error } = await supabase.auth.signOut();
      
      if (error) {
        throw error;
      }
      
      setUser(null);
      setSession(null);
      
      return {
        success: true,
        message: 'Logged out successfully'
      };
    } catch (err) {
      logError('AuthContext.logout', err);
      return {
        success: false,
        error: err.message
      };
    }
  };

  // Reset password
  const resetPassword = async (email) => {
    try {
      setError(null);
      
      if (!email) {
        return { success: false, error: 'Email is required' };
      }
      
      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `${window.location.origin}/auth/reset-password`,
      });
      
      if (error) {
        throw error;
      }
      
      return {
        success: true,
        message: 'Password reset email sent successfully'
      };
    } catch (err) {
      logError('AuthContext.resetPassword', err);
      return {
        success: false,
        error: err.message
      };
    }
  };

  // Update user profile
  const updateProfile = async (profileData) => {
    try {
      setError(null);
      
      if (!user) {
        return { success: false, error: 'User not authenticated' };
      }
      
      const { data, error } = await supabase
        .from('profiles')
        .update(profileData)
        .eq('id', user.id)
        .select()
        .single();
        
      if (error) {
        throw error;
      }
      
      // Update user state with new profile data
      setUser({
        ...user,
        profile: data
      });
      
      return {
        success: true,
        profile: data
      };
    } catch (err) {
      logError('AuthContext.updateProfile', err);
      return {
        success: false,
        error: err.message
      };
    }
  };

  // Update email
  const updateEmail = async (newEmail, password) => {
    try {
      setError(null);
      
      if (!user) {
        return { success: false, error: 'User not authenticated' };
      }
      
      if (!newEmail || !password) {
        return { success: false, error: 'Email and password are required' };
      }
      
      const { error } = await supabase.auth.updateUser({
        email: newEmail,
        password: password
      });
      
      if (error) {
        throw error;
      }
      
      return {
        success: true,
        message: 'Email update initiated. Please check your new email for confirmation.'
      };
    } catch (err) {
      logError('AuthContext.updateEmail', err);
      return {
        success: false,
        error: err.message
      };
    }
  };

  // Update password
  const updatePassword = async (currentPassword, newPassword) => {
    try {
      setError(null);
      
      if (!user) {
        return { success: false, error: 'User not authenticated' };
      }
      
      if (!currentPassword || !newPassword) {
        return { success: false, error: 'Current password and new password are required' };
      }
      
      const { error } = await supabase.auth.updateUser({
        password: newPassword
      });
      
      if (error) {
        throw error;
      }
      
      return {
        success: true,
        message: 'Password updated successfully'
      };
    } catch (err) {
      logError('AuthContext.updatePassword', err);
      return {
        success: false,
        error: err.message
      };
    }
  };

  // Ensure buyer profile exists
  const ensureBuyerProfile = async (user) => {
    try {
      let { data: profile, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .maybeSingle();
        
      if (!profile && !error) {
        // Create profile if it doesn't exist
        const { data: newProfile, error: createError } = await supabase
          .from('profiles')
          .insert({
            id: user.id,
            full_name: user.user_metadata?.full_name || user.email?.split('@')[0] || 'User',
            email: user.email,
            role: 'customer',
            created_at: new Date(),
            is_active: true
          })
          .select()
          .single();
          
        if (createError) {
          throw createError;
        }
        
        profile = newProfile;
      }
      
      return profile;
    } catch (err) {
      console.error('Error ensuring buyer profile:', err);
      return null;
    }
  };

  const value = {
    user,
    session,
    loading,
    error,
    register,
    login,
    logout,
    resetPassword,
    updateProfile,
    updateEmail,
    updatePassword,
    ensureBuyerProfile
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export default AuthContext; 