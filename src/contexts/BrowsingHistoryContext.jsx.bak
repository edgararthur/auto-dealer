import React, { createContext, useContext, useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import BrowsingHistoryService from '../../shared/services/browsingHistoryService.js';
import { useAuth } from './AuthContext-bypass';

const BrowsingHistoryContext = createContext();

export const useBrowsingHistory = () => useContext(BrowsingHistoryContext);

export const BrowsingHistoryProvider = ({ children, maxHistoryItems = 100 }) => {
  const [historyItems, setHistoryItems] = useState([]);
  const [recentlyViewed, setRecentlyViewed] = useState([]);
  const [loading, setLoading] = useState(true);
  const [patterns, setPatterns] = useState({});
  
  // Use auth context safely - check if it's available
  let user = null;
  try {
    const authContext = useAuth();
    user = authContext?.user;
  } catch (error) {
    // Auth context not available yet, user remains null
    if (process.env.NODE_ENV === 'development') {
      console.log('BrowsingHistoryProvider: Auth context not available yet');
    }
  }

  // Load browsing history when user changes
  useEffect(() => {
    loadBrowsingHistory();
    loadRecentlyViewed();
    loadBrowsingPatterns();
  }, [user]);

  // Load browsing history using BrowsingHistoryService
  const loadBrowsingHistory = async () => {
    try {
      setLoading(true);
      const result = await BrowsingHistoryService.getBrowsingHistory({ 
        limit: maxHistoryItems 
      });
      
      if (result.success) {
        setHistoryItems(result.history || []);
      } else {
        if (process.env.NODE_ENV === 'development') {
          console.error('Error loading browsing history:', result.error);
        }
        setHistoryItems([]);
      }
    } catch (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('Error loading browsing history:', error);
      }
      setHistoryItems([]);
    } finally {
      setLoading(false);
    }
  };

  // Load recently viewed products
  const loadRecentlyViewed = async () => {
    try {
      const result = await BrowsingHistoryService.getRecentlyViewed(10);
      
      if (result.success) {
        setRecentlyViewed(result.products || []);
      }
    } catch (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('Error loading recently viewed:', error);
      }
    }
  };

  // Load browsing patterns
  const loadBrowsingPatterns = async () => {
    try {
      const result = await BrowsingHistoryService.getBrowsingPatterns();
      
      if (result.success) {
        setPatterns(result.patterns || {});
      }
    } catch (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('Error loading browsing patterns:', error);
      }
    }
  };

  // Track product view
  const trackProductView = async (productId, metadata = {}) => {
    try {
      const result = await BrowsingHistoryService.trackProductView(productId, metadata);
      
      if (result.success) {
        // Refresh the history and recently viewed
        loadRecentlyViewed();
        // Only refresh full history occasionally to avoid too many requests
        if (Math.random() < 0.1) { // 10% chance
          loadBrowsingHistory();
        }
      }
    } catch (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('Error tracking product view:', error);
      }
    }
  };

  // Add a product to browsing history (backward compatibility)
  const addToHistory = async (productData) => {
    if (!productData || !productData.id) return;
    
    await trackProductView(productData.id, {
      sessionId: sessionStorage.getItem('session_id'),
      referrer: document.referrer
    });
  };

  // Clear browsing history
  const clearHistory = async () => {
    try {
      const result = await BrowsingHistoryService.clearHistory();
      
      if (result.success) {
        setHistoryItems([]);
        setRecentlyViewed([]);
        setPatterns({});
      } else {
        if (process.env.NODE_ENV === 'development') {
          console.error('Error clearing browsing history:', result.error);
        }
      }
    } catch (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('Error clearing browsing history:', error);
      }
    }
  };

  // Remove a single item from browsing history
  const removeFromHistory = async (historyItemId) => {
    // For now, just remove from local state
    // In a full implementation, you'd need a service method for this
    const updatedHistory = historyItems.filter(item => item.id !== historyItemId);
    setHistoryItems(updatedHistory);
  };

  // Get browsing history grouped by date
  const getHistoryGroupedByDate = () => {
    const groups = {};
    
    historyItems.forEach(item => {
      const date = new Date(item.viewed_at).toLocaleDateString();
      if (!groups[date]) {
        groups[date] = [];
      }
      groups[date].push(item);
    });
    
    return Object.entries(groups).map(([date, items]) => ({
      date,
      items
    }));
  };

  // Get browsing statistics
  const getStatistics = async () => {
    try {
      const result = await BrowsingHistoryService.getStatistics();
      return result;
    } catch (error) {
      if (process.env.NODE_ENV === 'development') {
        console.error('Error getting statistics:', error);
      }
      return { success: false, error: error.message };
    }
  };

  const value = {
    historyItems,
    recentlyViewed,
    patterns,
    loading,
    trackProductView,
    addToHistory, // Backward compatibility
    clearHistory,
    removeFromHistory,
    getHistoryGroupedByDate,
    getStatistics,
    refreshHistory: loadBrowsingHistory,
    refreshRecentlyViewed: loadRecentlyViewed,
    refreshPatterns: loadBrowsingPatterns
  };

  return (
    <BrowsingHistoryContext.Provider value={value}>
      {children}
    </BrowsingHistoryContext.Provider>
  );
};

BrowsingHistoryProvider.propTypes = {
  children: PropTypes.node.isRequired,
  maxHistoryItems: PropTypes.number
};

export default BrowsingHistoryContext; 