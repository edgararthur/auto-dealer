import supabase from '../supabase/supabaseClient.js';

/**
 * OPTIMIZED ProductService - Single query with JOINs instead of N+1 queries
 * Performance improvement: 4 queries reduced to 1 query
 */
const ProductService = {
  /**
   * Get products with filters and pagination - OPTIMIZED
   * @param {Object} filters - Filter options
   * @returns {Promise} - Products with related data
   */
  getProducts: async (filters = {}) => {
    try {
      // OPTIMIZATION: Single query with JOINs instead of multiple queries
      let query = supabase
        .from('products')
        .select(`
          id,
          name,
          description,
          short_description,
          sku,
          price,
          cost_price,
          discount_price,
          stock_quantity,
          min_stock_level,
          location,
          part_number,
          condition,
          specifications,
          compatibility,
          warranty_info,
          status,
          created_at,
          updated_at,
          dealer_id,
          category_id,
          subcategory_id,
          brand_id,
          product_images!left(id, url, is_primary),
          category:categories!category_id(id, name, description),
          subcategory:categories!subcategory_id(id, name, description),
          brand:brands!brand_id(id, name, description)
        `)
        .eq('status', 'approved')
        .eq('is_active', true);

      // Apply filters
      if (filters.category && filters.category !== 'all') {
        query = query.eq('category_id', filters.category);
      }

      if (filters.subcategory && filters.subcategory !== 'all') {
        query = query.eq('subcategory_id', filters.subcategory);
      }

      if (filters.brand && filters.brand !== 'all') {
        query = query.eq('brand_id', filters.brand);
      }

      if (filters.dealer && filters.dealer !== 'all') {
        query = query.eq('dealer_id', filters.dealer);
      }

      if (filters.minPrice && filters.maxPrice) {
        query = query.gte('price', filters.minPrice).lte('price', filters.maxPrice);
      }

      if (filters.search) {
        query = query.or(`name.ilike.%${filters.search}%,description.ilike.%${filters.search}%,part_number.ilike.%${filters.search}%`);
      }

      if (filters.inStock) {
        query = query.gt('stock_quantity', 0);
      }

      if (filters.condition && filters.condition !== 'all') {
        query = query.eq('condition', filters.condition);
      }

      // Sorting
      if (filters.sortBy) {
        switch (filters.sortBy) {
          case 'price_asc':
            query = query.order('price', { ascending: true });
            break;
          case 'price_desc':
            query = query.order('price', { ascending: false });
            break;
          case 'name':
            query = query.order('name', { ascending: true });
            break;
          case 'newest':
            query = query.order('created_at', { ascending: false });
            break;
          case 'popularity':
            // For now, use a combination of stock and creation date
            query = query.order('stock_quantity', { ascending: false })
                         .order('created_at', { ascending: false });
            break;
          default:
            query = query.order('created_at', { ascending: false });
        }
      } else {
        query = query.order('created_at', { ascending: false });
      }

      // OPTIMIZATION: Pagination support
      if (filters.page && filters.limit) {
        const start = (filters.page - 1) * filters.limit;
        const end = start + filters.limit - 1;
        query = query.range(start, end);
      } else if (filters.limit) {
        query = query.limit(filters.limit);
      }

      const { data: products, error, count } = await query;

      if (error) {
        console.error('Error fetching products:', error);
        throw error;
      }

      // OPTIMIZATION: Data transformation is now simpler since we have all data
      const transformedData = products.map(product => {
        // Find primary image
        const primaryImg = product.product_images?.find(img => img.is_primary) || product.product_images?.[0];
        
        return {
          ...product,
          image: primaryImg?.url || 'https://images.unsplash.com/photo-1486262715619-67b85e0b08d3?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&h=350&q=80',
          product_images: product.product_images || [],
          inStock: product.stock_quantity > 0,
          isNew: new Date(product.created_at) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
          oldPrice: product.discount_price ? product.price : null,
          price: product.discount_price || product.price,
          category: product.category || { id: product.category_id, name: 'Unknown Category', description: null },
          subcategory: product.subcategory || null,
          brand: product.brand || { id: product.brand_id, name: 'Unknown Brand', description: null },
          dealer: {
            id: product.dealer_id,
            business_name: 'Unknown Dealer',
            company_name: 'Unknown Dealer',
            name: 'Unknown Dealer',
            location: 'Location not available',
            phone: null,
            verified: false,
            rating: 0,
            avatar_url: null
          }
        };
      });

      return { 
        success: true, 
        products: transformedData,
        count: count || transformedData.length,
        hasMore: filters.limit ? transformedData.length === filters.limit : false
      };

    } catch (error) {
      console.error('Error in getProducts:', error);
      return { success: false, error: error.message };
    }
  },

  /**
   * Get a single product by ID - OPTIMIZED with single query
   * @param {string} productId - Product ID
   * @returns {Promise} - Product details
   */
  getProductById: async (productId) => {
    try {
      const { data: product, error } = await supabase
        .from('products')
        .select(`
          *,
          product_images(id, url, is_primary),
          category:categories!category_id(id, name, description),
          subcategory:categories!subcategory_id(id, name, description),
          brand:brands!brand_id(id, name, description),
          product_reviews(
            id,
            rating,
            comment,
            created_at,
            user:profiles!user_id(id, full_name, avatar_url)
          )
        `)
        .eq('id', productId)
        .eq('status', 'approved')
        .eq('is_active', true)
        .single();

      if (error) {
        console.error('Error fetching product by ID:', error);
        throw error;
      }

      if (!product) {
        throw new Error('Product not found');
      }

      const primaryImg = product.product_images?.find(img => img.is_primary) || product.product_images?.[0];

      const transformedData = {
        ...product,
        image: primaryImg?.url || 'https://images.unsplash.com/photo-1486262715619-67b85e0b08d3?ixlib=rb-1.2.1&auto=format&fit=crop&w=500&h=350&q=80',
        product_images: product.product_images || [],
        inStock: product.stock_quantity > 0,
        isNew: new Date(product.created_at) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
        oldPrice: product.discount_price ? product.price : null,
        price: product.discount_price || product.price,
        category: product.category,
        subcategory: product.subcategory,
        brand: product.brand,
        reviews: product.product_reviews || [],
        dealer: {
          id: product.dealer_id,
          business_name: 'Unknown Dealer',
          company_name: 'Unknown Dealer',
          name: 'Unknown Dealer',
          location: 'Location not available',
          phone: null,
          verified: false,
          rating: 0,
          avatar_url: null
        }
      };

      return { success: true, product: transformedData };

    } catch (error) {
      console.error('Error in getProductById:', error);
      return { success: false, error: error.message };
    }
  },

  /**
   * Get categories with product counts - OPTIMIZED
   * @returns {Promise} - Categories
   */
  getCategories: async () => {
    try {
      const { data, error } = await supabase
        .from('categories')
        .select(`
          id, 
          name, 
          description,
          products!category_id(count)
        `)
        .order('name');

      if (error) {
        console.error('Error fetching categories:', error);
        throw error;
      }

      const categoriesWithCounts = data.map(category => ({
        ...category,
        product_count: category.products?.[0]?.count || 0
      }));

      return { success: true, categories: categoriesWithCounts };

    } catch (error) {
      console.error('Error in getCategories:', error);
      return { success: false, error: error.message };
    }
  },

  /**
   * Get brands with product counts - OPTIMIZED
   * @returns {Promise} - Brands
   */
  getBrands: async () => {
    try {
      const { data, error } = await supabase
        .from('brands')
        .select(`
          id, 
          name, 
          description,
          products!brand_id(count)
        `)
        .order('name');

      if (error) {
        console.error('Error fetching brands:', error);
        throw error;
      }

      const brandsWithCounts = data.map(brand => ({
        ...brand,
        product_count: brand.products?.[0]?.count || 0
      }));

      return { success: true, brands: brandsWithCounts };

    } catch (error) {
      console.error('Error in getBrands:', error);
      return { success: false, error: error.message };
    }
  },

  /**
   * Search products by query - OPTIMIZED
   * @param {string} query - Search query
   * @param {Object} filters - Additional filters
   * @returns {Promise} - Search results
   */
  searchProducts: async (query, filters = {}) => {
    try {
      const searchFilters = {
        ...filters,
        search: query
      };

      return await ProductService.getProducts(searchFilters);

    } catch (error) {
      console.error('Error in searchProducts:', error);
      return { success: false, error: error.message };
    }
  },

  /**
   * Get products by category - OPTIMIZED
   * @param {string} categoryId - Category ID
   * @param {Object} filters - Additional filters
   * @returns {Promise} - Products in category
   */
  getProductsByCategory: async (categoryId, filters = {}) => {
    try {
      const categoryFilters = {
        ...filters,
        category: categoryId
      };

      return await ProductService.getProducts(categoryFilters);

    } catch (error) {
      console.error('Error in getProductsByCategory:', error);
      return { success: false, error: error.message };
    }
  },

  /**
   * Get products by brand - OPTIMIZED
   * @param {string} brandId - Brand ID
   * @param {Object} filters - Additional filters
   * @returns {Promise} - Products by brand
   */
  getProductsByBrand: async (brandId, filters = {}) => {
    try {
      const brandFilters = {
        ...filters,
        brand: brandId
      };

      return await ProductService.getProducts(brandFilters);

    } catch (error) {
      console.error('Error in getProductsByBrand:', error);
      return { success: false, error: error.message };
    }
  },

  /**
   * Get products by dealer - OPTIMIZED
   * @param {string} dealerId - Dealer ID
   * @param {Object} filters - Additional filters
   * @returns {Promise} - Products by dealer
   */
  getProductsByDealer: async (dealerId, filters = {}) => {
    try {
      const dealerFilters = {
        ...filters,
        dealer: dealerId
      };

      return await ProductService.getProducts(dealerFilters);

    } catch (error) {
      console.error('Error in getProductsByDealer:', error);
      return { success: false, error: error.message };
    }
  },

  /**
   * Get featured products - OPTIMIZED
   * @param {number} limit - Number of products to return
   * @returns {Promise} - Featured products
   */
  getFeaturedProducts: async (limit = 10) => {
    try {
      return await ProductService.getProducts({ 
        limit,
        sortBy: 'popularity'
      });

    } catch (error) {
      console.error('Error in getFeaturedProducts:', error);
      return { success: false, error: error.message };
    }
  },

  /**
   * Get new arrivals - OPTIMIZED
   * @param {number} limit - Number of products to return
   * @returns {Promise} - New arrival products
   */
  getNewArrivals: async (limit = 10) => {
    try {
      return await ProductService.getProducts({ 
        limit,
        sortBy: 'newest'
      });

    } catch (error) {
      console.error('Error in getNewArrivals:', error);
      return { success: false, error: error.message };
    }
  },

  /**
   * Get best sellers - OPTIMIZED
   * @param {number} limit - Number of products to return
   * @returns {Promise} - Best selling products
   */
  getBestSellers: async (limit = 10) => {
    try {
      return await ProductService.getProducts({ 
        limit,
        sortBy: 'popularity'
      });

    } catch (error) {
      console.error('Error in getBestSellers:', error);
      return { success: false, error: error.message };
    }
  },

  /**
   * Get dealers with enhanced data - OPTIMIZED
   * @returns {Promise} - List of dealers
   */
  getDealers: async () => {
    try {
      const { data, error } = await supabase
        .from('profiles')
        .select(`
          id, 
          full_name, 
          company_name, 
          avatar_url,
          products!dealer_id(count)
        `)
        .not('company_name', 'is', null)
        .order('company_name');

      if (error) {
        console.error('Error fetching dealers:', error);
        throw error;
      }

      const transformedData = data.map(profile => ({
        id: profile.id,
        business_name: profile.company_name || profile.full_name || 'Unknown Dealer',
        company_name: profile.company_name || profile.full_name || 'Unknown Dealer',
        name: profile.full_name || 'Unknown Dealer',
        location: 'Location not available',
        phone: null,
        verified: false,
        rating: 0,
        avatar_url: profile.avatar_url,
        product_count: profile.products?.[0]?.count || 0
      }));

      return { success: true, dealers: transformedData };

    } catch (error) {
      console.error('Error in getDealers:', error);
      return { success: false, error: error.message };
    }
  },

  /**
   * Get price comparison for a product - OPTIMIZED
   * @param {string} productName - Product name
   * @param {string} partNumber - Part number
   * @returns {Promise} - Price comparison data
   */
  getPriceComparison: async (productName, partNumber) => {
    try {
      const { data: products, error } = await supabase
        .from('products')
        .select(`
          id, 
          name, 
          price, 
          discount_price, 
          stock_quantity, 
          dealer_id,
          dealer:profiles!dealer_id(id, full_name, company_name, avatar_url)
        `)
        .or(`name.ilike.%${productName}%,part_number.eq.${partNumber}`)
        .eq('status', 'approved')
        .eq('is_active', true)
        .gt('stock_quantity', 0)
        .order('price', { ascending: true });

      if (error) {
        console.error('Error fetching price comparison:', error);
        throw error;
      }

      const transformedData = products.map(product => ({
        dealer: {
          id: product.dealer_id,
          business_name: product.dealer?.company_name || product.dealer?.full_name || 'Unknown Dealer',
          company_name: product.dealer?.company_name || product.dealer?.full_name || 'Unknown Dealer',
          location: 'Location not available',
          verified: false,
          rating: 0,
          avatar_url: product.dealer?.avatar_url
        },
        price: product.discount_price || product.price,
        originalPrice: product.discount_price ? product.price : null,
        stock: product.stock_quantity > 0 ? `In stock (${product.stock_quantity} available)` : 'Out of stock',
        shipping: {
          cost: 0,
          estimatedDays: '2-3'
        }
      }));

      return { success: true, priceComparison: transformedData };

    } catch (error) {
      console.error('Error in getPriceComparison:', error);
      return { success: false, error: error.message };
    }
  }
};

export default ProductService; 